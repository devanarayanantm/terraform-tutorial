Detailed Content
1. Terraform Basics
-------------------------------------------------------------------------------------------------------
Infrastructure as Code (IaC) 
	Process of 
		managing and 
		provisioning 
			the complete IT infrastructure 
	(comprises both 
		physical and 
		virtual 
			machines) 
		using machine-readable definition files. 
	Automate environment provisioning process.
	Ease maintenance of the environment.
	Manage the source code of it in SCM.


Challenges with Infrastructure as Code :
	Need to learn to code
	Don’t know the change impact.
	Need to revert the change
	Can’t track changes
	Can’t automate a resource
	Multiple environments for infrastructure
	Terraform has been created to solve these challenges.


Terraform introduction	
----------------------
What is Terraform?
	Open-source infrastructure as Code 
	Developed by HashiCorp. 
	Used to 
		define and 
		provision the 
			complete infrastructure 
	Declarative language.

	Infrastructure provisioning tool 
	Cloud infrastructure setup as codes. 
	Similar to tools like CloudFormation
		However provider independent.
	
	
Adv. of Terraform
	Does infrastructure provisioning
	Supports 
		multiple providers such as 
			AWS, 
			Azure, 
			GCP, 
			DigitalOcean and 
			many more
		Easily portable to any other provider
	Uses easy to understand language, 
		HCL (HashiCorp configuration language)
	Provide 
		immutable infrastructure 
			where configuration changes smoothly
	
Immutable infrastructure
------------------------
Terraform provides immutable infrastructure 
	by ensuring that 
		any changes to the desired state of your infrastructure are 
			applied in a 
				consistent, 
				predictable 
					manner. 
	i.e.
		Terraform will plan the required steps 
			to achieve the 
				desired state and 
				then execute those steps.

Here's how Terraform achieves immutability and smooth configuration changes:

State Management:

	Terraform maintains a state file 
		records the current configuration 
			of your infrastructure. 
		This state file 
			track the resources 
				created and 
				their corresponding attributes.
	make changes to your Terraform configuration, 
		Terraform compares 
			desired state (defined in your configuration) 
		with 
			current state (stored in the state file). 
		It then determines the necessary actions to reconcile the two states.
Infrastructure as Code (IaC):

	Terraform treats 
		infrastructure as code
		i.e. 
			desired state of your infrastructure 
				defined in a declarative configuration file. 
		version control your infrastructure, 
			easy to track changes and 
			collaborate with others.
	By using IaC, 
		easily recreate your infrastructure from scratch, 
		ensure 
			consistency and 
			reproducibility.
Resource Provisioning and Destruction:

	Terraform provisions resources by 
		creating them 
			based on the desired state 
				defined in your configuration. 
		It uses the provider's API to 
			interact with the 
			underlying infrastructure.
	To update resource, 
		Terraform will destroy 
			existing resource and 
			create a new one with the desired configuration. 
		Ensures 
			resource are always in the desired state.
	Terraform can destroy resources, 
		freeing up resources and preventing unnecessary costs.
Change Planning and Execution:

	Before applying any changes to your infrastructure, 
		Terraform 
			creates a plan 
			outlines the steps required to achieve the desired state. 
		This plan 
			shows you the resources that will be 
				created, 
				updated, or 
				destroyed.
	You can review the plan to 
		ensure that the 
			changes are as expected and then 
				apply them using the apply command.
Drift Detection:

	Terraform can detect drift
		occurs when the actual state of your infrastructure 
			deviates from the desired state. 
		This can happen due to manual changes or external factors.
	By detecting drift, 
		Terraform can help you identify and correct inconsistencies in your infrastructure.

	To detect
		Take a back up of state file 
		do terraform refresh
		compare between old and new state file 


	terraform plan: 
		This command 
			creates a plan 
				that outlines 
					steps required to 
						reconcile 
							desired state 
						with 
							actual state. 
			If there are any drifts
				plan will show the 
					necessary actions to correct them.
	terraform refresh: 
		This command updates the state file 
			with the latest information from the provider. 
		This is useful 
			if you have made 
				manual changes to your infrastructure 
				or 
					if the provider's state has been updated.
	
		
		
	terraform apply: 
		This command applies the changes outlined in the 
			plan, 
			including correcting any drifts.

Additional Features:

	Terraform provides additional features such as 
		modules, 
		variables, and 
		outputs 
			to 
				help you manage 
					complex infrastructure and 
			share reusable components.
			
			
	These features 
		make it easier to 
			organize your Terraform configuration and 
			promote code reusability.


References: D:\PraiseTheLord\HSBGInfotech\DevOps\Terraform\TerraformTOC.txt

The Core Terraform Workflow
The core Terraform workflow has three steps:
    Write - Author infrastructure as code.
    Plan - Preview changes before applying.
    Apply - Provision reproducible infrastructure.

Vilas: Copied from my notes
------------------------------------------------------------------------------------------------------

https://www.terraform.io/language
Terraform Language
	main purpose 
		declare resources
			represent infrastructure objects. 
	
	All other language features 
		make the definition of resources more flexible and convenient.

A Terraform configuration 
	complete document in Terraform language 
	Tells Terraform 
		how to manage a given collection of infrastructure. 
	Can consist of multiple files and directories.

Syntax of the Terraform language 
	simple

resource "aws_vpc" "main" {
  cidr_block = var.base_cidr_block
}

<BLOCK TYPE> "<BLOCK LABEL>" "<BLOCK LABEL>" {
  # Block body
  <IDENTIFIER> = <EXPRESSION> # Argument
}
e.g. 
resource "azurerm_resource_group" "myrg" { # Resource BLOCK
  name = "myrg-1" # Argument
  location = "East US" # Argument 
}

Blocks 
------
	Most of Terraform's features 
		controlled by top-level blocks in a configuration file.
		
	containers for other content 
	represent configuration of an object
		e.g. resource. 
	have a block type
	
	can have 
		zero or more labels
	a body 
		contains (number of) arguments 
		nested blocks. 
	



Arguments 
---------
	assign a value to a name. 
	They appear within blocks.
	can be 
		required or 
		optional
	Meta-Arguments 
		change a resource type's behavior 
			e.g.: 
				count, 
				for_each


Expressions 
-----------
	represent a value
	either 
		literally or 
		by referencing and combining other values. 
	Appear as values for arguments, or within other expressions.
	format:
		resource_type.resource_name.attribute_name
	 
The Terraform language 
----------------------
	declarative
		Describing an intended goal 
		Not steps to reach that goal. 
	The ordering of 
		blocks and 
		files 
			not significant; 
			
	Considers 
		implicit and 
		explicit relationships 
			between resources when determining an order of operations.

Files and Directories
---------------------
	Files containing Terraform 
		called configuration files.

	Configuration (Module) Directory
	-----------------------
		Directory 
			can have any number of configuration files.
		Any file with .tf extension 
			will participate in CRUD of the infrastructure components.
		One file 
			any number of configuraiton blocks.
		
		Common other files found
			main.tf - main configuration
			variables.tf - variables delclaration
			outputs.tf - outputs from resources.
			providers.tf - define providers
			
				can be .tf.json also - but commonly used.
		
	File Extension
	--------------
		Code in Terraform language 
			Stored in simple text files 
			.tf file extension. 
			or JSON-based variant - .tf.json file extension.

	Text Encoding
	-------------
		Configuration files 
			must always use 
				UTF-8 encoding while accessing files, and by convention usually use Unix-style line endings (LF) rather than Windows-style line endings (CRLF), though both are accepted.

	Directories and Modules
	-----------------------
		
		A module 
			collection of .tf and/or .tf.json files 
			kept together in a directory.
		
		Similar to function definitions in traditional languages
		
		A Terraform module 
			consists of the top-level configuration files in a directory; 
			nested directories 
				treated as completely separate modules
				not automatically included in the configuration.

		Terraform evaluates 
			all configuration files in a module
			treat the entire module as a single document. 
		Separating blocks into different files 
			purely for the convenience 
			no effect on the module's behavior.

	A Terraform module 
		can use module calls 
		explicitly include other modules into the configuration. 
		Child modules can come from 
			nested directories, or 
			anywhere else on disk or 
			external sources 
				e.g. Terraform Registry.

The Root Module
---------------
	Terraform 
		always runs in the context of a single root module. 
		A complete Terraform configuration 
			has a root module 
			tree of child modules 
			(modules called by the root module
			modules called by those modules, etc.).

	root module 
		working directory where Terraform command is invoked. 


-------------------------------------------------------------------------------------------------------

1.1 Introduction to Terraform and Infrastructure as Code (IaC)
-------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------
1.2 Installing Terraform and Setting Up Environment
-------------------------------------------------------------------------------------------------------


https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli

install aws cli 
	https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html
-------------------------------------------------------------------------------------------------------
1.3 Writing and Executing Simple Terraform Configurations
-------------------------------------------------------------------------------------------------------
my ec2 instance 
	terraform plan 
	terraform apply 
	terraform destroy 
	

-------------------------------------------------------------------------------------------------------
1.4 Understanding Terraform Modules, State, Lock
-------------------------------------------------------------------------------------------------------




Modules 
	containters for multiple resources
		managed and used together
	collection of .tf/.tf.json files 
		kept together in a directory
	main way to package and reuse
		resource configuration in Terraform
	
	
Terraform configuration 
	has atleast one module
	known as root module
	consists of resources defined in 
		.tf files 
		in main working directory.
	configurations (usually root module)
		call other modules 
		to include their resources
			into the configuration
Child module
	module called/executed by another module
	can be called multiple times
		within same configuration
	multiple configurations can use same child module
From local filesystem
	Terraform can load modules
		from a public/private registry
	can publish modules for others to use 
		can use modules published by others
	e.g. https://registry.terraform.io/modules/Azure/vnet/azurerm/latest
	
	
https://registry.terraform.io/
	There is a completely seperate doc. for modules
	There we see the documentation for accessing modules
	
lab/1

Define a Child Module
---------------------
N.B:
	Module Source (Mandatory): 
		Use Terraform Registry to begin with
	Module Version (Optional): 
		Recommended to use module version	
	
	We will use the previous example 
		remove 
			Virtual Network and 
			Subnet Terraform 
		use 
			Virtual Network Public Registry module.
	
	Refer code in 
	https://registry.terraform.io/modules/Azure/vnet/azurerm/latest
	
# Create Virtual Network and Subnets using Terraform Public Registry Module

Add below into the main.tf
module "vpc" {
  source  = "terraform-aws-modules/vpc"
  version = "~> 3.0"

  name           = local.vpc_name
  cidr_block     = "10.0.0.0/16"
  tags = {
    environment = "dev"
    costcenter = "it"
  }

  # Optional Arguments (replace with appropriate values)
  availability_zones = ["us-east-1a", "us-east-1b"]
  internet_gateway  = true
  public_subnets     = [
    { cidr_block = "10.0.1.0/24", availability_zone = "us-east-1a" },
    { cidr_block = "10.0.2.0/24", availability_zone = "us-east-1b" },
  ]
  private_subnets    = [
    { cidr_block = "10.0.3.0/24", availability_zone = "us-east-1a" },
  ]
}


resource "aws_network_interface" "myvmnic" {
  name                 = local.nic_name
  subnet_id            = module.vpc.public_subnets[0].id  # Assuming the first public subnet
  private_ip_address_allocation = "Dynamic"
  security_groups = [aws_security_group.my_security_group.id]  # Replace with your security group ID

  # Optional Arguments
  associate_public_ip_address = true  # Assign a public IP address (if needed)
  description                = "Network Interface for My VM"
  tags                       = local.common_tags
}


output "vpc_id" {
  value = module.vpc.vpc_id
}

output "public_subnet_ids" {
  value = module.vpc.public_subnets[*].id
}

# Optional Outputs (if using private subnets)
output "private_subnet_ids" {
  value = module.vpc.private_subnets[*].id
}
---------------

(no other change required)

lab/2

add ssh keys

# Terraform Init
terraform init

# Terraform Validate
terraform validate

# Terraform Format
terraform fmt

# Terraform Plan
terraform plan

# Terraform Apply
terraform apply -auto-apporve




	A module 
		container for multiple resources 
			that are used together.

Every Terraform configuration 
	has at least one module
		called root module
	consists of the resources defined in the .tf files in the main working directory.

A module can call other modules
	can include 
		child module's resources into the configuration in a concise way. 
	Modules 
		can be called multiple times, 
		either within the 
			same configuration 
			or 
			in separate configurations, 
			allowing resource configurations to be packaged and re-used.

This page describes 
	how to call one module from another. 
	For more information about creating re-usable child modules, see Module Development.


Calling a Child Module
To call a module means 
	to include the contents of that module 
		into the configuration with 
			specific values for its input variables. 
	Modules are called from within other modules using module blocks:

module "servers" {
  source = "./app-cluster"

  servers = 5
}

A module that includes a module block like this is the calling module of the child module.



The label immediately after the module keyword is a local name, which the calling module can use to refer to this instance of the module.

Below can be skipped
--------------------

Within the block body (between { and }) are the arguments for the module. Module calls use the following kinds of arguments:

The source argument is mandatory for all modules.

The version argument is recommended for modules from a registry.

Most other arguments correspond to input variables defined by the module. (The servers argument in the example above is one of these.)

Terraform defines a few other meta-arguments that can be used with all modules, including for_each and depends_on.

»Source
All modules require a source argument, which is a meta-argument defined by Terraform. Its value is either the path to a local directory containing the module's configuration files, or a remote module source that Terraform should download and use. This value must be a literal string with no template sequences; arbitrary expressions are not allowed. For more information on possible values for this argument, see Module Sources.

The same source address can be specified in multiple module blocks to create multiple copies of the resources defined within, possibly with different variable values.

After adding, removing, or modifying module blocks, you must re-run terraform init to allow Terraform the opportunity to adjust the installed modules. By default this command will not upgrade an already-installed module; use the -upgrade option to instead upgrade to the newest available version.

»Version
When using modules installed from a module registry, we recommend explicitly constraining the acceptable version numbers to avoid unexpected or unwanted changes.

Use the version argument in the module block to specify versions:

module "consul" {
  source  = "hashicorp/consul/aws"
  version = "0.0.5"

  servers = 3
}
The version argument accepts a version constraint string. Terraform will use the newest installed version of the module that meets the constraint; if no acceptable versions are installed, it will download the newest version that meets the constraint.

Version constraints are supported only for modules installed from a module registry, such as the public Terraform Registry or Terraform Cloud's private module registry. Other module sources can provide their own versioning mechanisms within the source string itself, or might not support versions at all. In particular, modules sourced from local file paths do not support version; since they're loaded from the same source repository, they always share the same version as their caller.

»Meta-arguments
Along with source and version, Terraform defines a few more optional meta-arguments that have special meaning across all modules, described in more detail in the following pages:

count - Creates multiple instances of a module from a single module block. See the count page for details.

for_each - Creates multiple instances of a module from a single module block. See the for_each page for details.

providers - Passes provider configurations to a child module. See the providers page for details. If not specified, the child module inherits all of the default (un-aliased) provider configurations from the calling module.

depends_on - Creates explicit dependencies between the entire module and the listed targets. See the depends_on page for details.

In addition to the above, the lifecycle argument is not currently used by Terraform but is reserved for planned future features.

»Accessing Module Output Values
The resources defined in a module are encapsulated, so the calling module cannot access their attributes directly. However, the child module can declare output values to selectively export certain values to be accessed by the calling module.

For example, if the ./app-cluster module referenced in the example above exported an output value named instance_ids then the calling module can reference that result using the expression module.servers.instance_ids:

resource "aws_elb" "example" {
  # ...

  instances = module.servers.instance_ids
}

For more information about referring to named values, see Expressions.

»Transferring Resource State Into Modules
Moving resource blocks from one module into several child modules causes Terraform to see the new location as an entirely different resource. As a result, Terraform plans to destroy all resource instances at the old address and create new instances at the new address.

To preserve existing objects, you can use refactoring blocks to record the old and new addresses for each resource instance. This directs Terraform to treat existing objects at the old addresses as if they had originally been created at the corresponding new addresses.

»Replacing resources within a module
You may have an object that needs to be replaced with a new object for a reason that isn't automatically visible to Terraform, such as if a particular virtual machine is running on degraded underlying hardware. In this case, you can use the -replace=... planning option to force Terraform to propose replacing that object.

If the object belongs to a resource within a nested module, specify the full path to that resource including all of the nested module steps leading to it. For example:

$ terraform plan -replace=module.example.aws_instance.example

The above selects a resource "aws_instance" "example" declared inside a module "example" child module declared inside your root module.

Because replacing is a very disruptive action, Terraform only allows selecting individual resource instances. There is no syntax to force replacing all resource instances belonging to a particular module.


